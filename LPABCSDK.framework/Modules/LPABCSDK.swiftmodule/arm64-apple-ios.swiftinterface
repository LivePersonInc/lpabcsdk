// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LPABCSDK
import CoreData
import Foundation
@_exported import LPABCSDK
import Messages
import Network
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class LPABCSDK : ObjectiveC.NSObject {
  final public var isCacheLoaded: Swift.Bool {
    get
  }
  final public var hostEnvironment: LPABCSDK.LPHostEnvironment? {
    get
  }
  final public var aggregatedSDEStackCompletion: LPABCSDK.LPABCSDK.CompletionCallbackType
  public static var isPresenting: Swift.Bool? {
    get
  }
  public typealias SuccessCallbackType = ((_ success: Swift.Bool) -> Swift.Void)?
  public typealias FailureCallbackType = ((_ error: Swift.Error?) -> Swift.Void)?
  public typealias CompletionCallbackType = ((_ success: Swift.Bool, _ error: Swift.Error?) -> Swift.Void)?
  public typealias EventCallbackType = ((_ type: LPABCSDK.LPABCEvent, _ customPayload: Foundation.URLQueryItem?) -> Swift.Void)?
  final public var abcEventCallback: LPABCSDK.LPABCSDK.EventCallbackType {
    get
    set
  }
  final public func setAggregatedInterval(interval: Swift.Double)
  @available(iOS 11.3, *)
  @discardableResult
  public static func initialize(minimumLogLevel: LPABCSDK.LPABCLogLevel = .info, eventSubscription: Swift.Set<LPABCSDK.LPABCEvent>? = LPABCEvent.allEvents) -> LPABCSDK.LPABCSDK
  @available(iOS 11.3, *)
  public static func synchronize()
  @available(iOS 11.3, *)
  final public class func dispose()
  @objc deinit
}
public struct SDECart : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDEMarketingSource : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(channel: LPABCSDK.SDEChanelType?, affiliate: Swift.String?, campaignID: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum SDEType : Swift.String, Swift.CaseIterable {
  case cartUpdate
  case transaction
  case viewedProduct
  case customerInfo
  case marketingSource
  case personalInfo
  case lead
  case serviceActivity
  case visitorError
  case searchedContent
  public init?(rawValue: Swift.String)
  public typealias AllCases = [LPABCSDK.SDEType]
  public typealias RawValue = Swift.String
  public static var allCases: [LPABCSDK.SDEType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum SDEStatusType : Swift.Int {
  case complete
  case in_Progress
  case approved
  case cancelled
  case not_Approved
  case reviewed
  case missing_Details
  case closed
  case removed
  case assigned
  case waiting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SDEChanelType : Swift.Int {
  case direct
  case search
  case social
  case email
  case referral
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SDEGenderType : Swift.String {
  case male
  case female
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SDEPhoneType : Swift.String {
  case home
  case mobile
  case work
  case fax
  case main
  case home_fax
  case work_fax
  case pager
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SDEDate : Swift.Codable {
  public init(day: Swift.Int, month: Swift.Int, year: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDEService : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(topic: Swift.String?, status: LPABCSDK.SDEStatusType?, category: Swift.String?, serviceId: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDESearchedContent : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(keywords: [Swift.String]?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension LPABCSDK.LPABCSDK {
  @available(iOS 11.3, *)
  final public func update(with conversation: Messages.MSConversation, message: Messages.MSMessage? = nil, sdkParams: LPABCSDK.SDKParams? = nil)
}
@_hasMissingDesignatedInitializers public class SDEVisitorError : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(contextId: Swift.String?, message: Swift.String?, code: Swift.String?, level: Swift.Int?, resolved: Swift.Bool?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDEProductView : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(currency: Swift.String?, products: [LPABCSDK.SDEProductMaker]?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDEPersonalInfo : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(firstname: Swift.String?, lastname: Swift.String?, gender: LPABCSDK.SDEGenderType?, company: Swift.String?, language: Swift.String?, age: LPABCSDK.SDEAge?, contacts: [LPABCSDK.SDEContact]?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SDEAge : Swift.Codable {
  public init(age: Swift.Int?, year: Swift.Int?, month: Swift.Int?, day: Swift.Int?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SDEContact : Swift.Codable {
  public init(email: Swift.String?, phone: Swift.String?, phoneType: LPABCSDK.SDEPhoneType?, country: Swift.String?, region: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDEBase : Swift.Codable {
  public var cartUpdate: LPABCSDK.SDECartUpdate? {
    get
  }
  public var transaction: LPABCSDK.SDETransaction? {
    get
  }
  public var viewedProduct: LPABCSDK.SDEProductView? {
    get
  }
  public var customerInfo: LPABCSDK.SDECustomerInfo? {
    get
  }
  public var marketingSource: LPABCSDK.SDEMarketingSource? {
    get
  }
  public var personalInfo: LPABCSDK.SDEPersonalInfo? {
    get
  }
  public var lead: LPABCSDK.SDELead? {
    get
  }
  public var serviceActivity: LPABCSDK.SDEService? {
    get
  }
  public var visitorError: LPABCSDK.SDEVisitorError? {
    get
  }
  public var searchedContent: LPABCSDK.SDESearchedContent? {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension LPABCSDK.SDEBase {
  public func setupWithJson<T>(_ json: T?) where T : LPABCSDK.UnifiedLooseSDE
}
@_hasMissingDesignatedInitializers public class SDECartUpdate : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(total: Swift.Double?, currency: Swift.String?, numItems: Swift.Int?, products: [LPABCSDK.SDEProductMaker]?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SDETransaction : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(total: Swift.Double?, currency: Swift.String?, orderId: Swift.String?, products: [LPABCSDK.SDEProductMaker])
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@available(iOS 11.3, *)
public enum LPHostEnvironment : Swift.String {
  case iOSApp
  case iMessageApp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 11.3, *)
public enum LPABCLogLevel : Swift.Int {
  case trace
  case debug
  case info
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 11.3, *)
public enum LPABCEvent : Swift.Comparable, Swift.Hashable {
  public static func < (lhs: LPABCSDK.LPABCEvent, rhs: LPABCSDK.LPABCEvent) -> Swift.Bool
  case newConversation
  case secureForm(LPABCSDK.SecureFormState)
  case custom
  case none
  public static func == (a: LPABCSDK.LPABCEvent, b: LPABCSDK.LPABCEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 11.3, *)
public enum SecureFormState {
  case viewed
  case submitted
  case expired
  case error
  public static func == (a: LPABCSDK.SecureFormState, b: LPABCSDK.SecureFormState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 11.3, *)
extension LPABCSDK.LPABCEvent {
  public static let allEvents: Swift.Set<LPABCSDK.LPABCEvent>
  public static let noEvents: Swift.Set<LPABCSDK.LPABCEvent>?
}
extension LPABCSDK.LPABCSDK {
  final public func createSDE(sdeType: LPABCSDK.SDEType, aggregate: Swift.Bool? = false, completion: (inout LPABCSDK.SDEBase) -> Swift.Void)
  final public func sendSDEStack(onSuccess success: LPABCSDK.LPABCSDK.SuccessCallbackType = nil, onFailure failure: LPABCSDK.LPABCSDK.FailureCallbackType = nil)
}
@_hasMissingDesignatedInitializers public class SDECustomerInfo : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(cstatus: Swift.String?, ctype: Swift.String?, balance: Swift.Double?, currency: Swift.String?, socialId: Swift.String?, imei: Swift.String?, userName: Swift.String?, companySize: Swift.Int?, companyBranch: Swift.String?, accountName: Swift.String?, role: Swift.String?, loginStatus: Swift.Int?, storeZipCode: Swift.String?, storeNumber: Swift.String?, lastPaymentDate: LPABCSDK.SDEDate?, registrationDate: LPABCSDK.SDEDate?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension LPABCSDK.LPABCSDK {
  final public func appendReplayContextualText(message: Messages.MSMessage, textContext: Swift.String)
}
public struct SDEProductMaker : Swift.Codable {
  public init(name: Swift.String?, category: Swift.String?, sku: Swift.String?, price: Swift.Double?, quantity: Swift.Int?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
precedencegroup PowerPrecedence {
  higherThan: MultiplicationPrecedence
}
infix operator ^^ : PowerPrecedence
public struct SDKParams {
  weak public var messagesViewController: Messages.MSMessagesAppViewController? {
    get
  }
  public var secureFormReplyImagee: UIKit.UIImage? {
    get
  }
  public var secureFormReplyText: Swift.String? {
    get
  }
  public init?(messagesViewController: Messages.MSMessagesAppViewController, secureFormReplyImagee: UIKit.UIImage? = nil, secureFormReplyText: Swift.String? = nil)
}
public protocol UnifiedLooseSDE {
  var jsonSDE: Swift.String? { get set }
  var dictionarySDE: [Swift.String : Any]? { get set }
}
extension Swift.Dictionary : LPABCSDK.UnifiedLooseSDE {
  public var jsonSDE: Swift.String? {
    get
    set
  }
  public var dictionarySDE: [Swift.String : Any]? {
    get
    set
  }
}
extension Swift.String : LPABCSDK.UnifiedLooseSDE {
  public var jsonSDE: Swift.String? {
    get
    set
  }
  public var dictionarySDE: [Swift.String : Any]? {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class SDELead : Swift.Codable {
  public var type: Swift.String {
    get
  }
  public func setup(topic: Swift.String?, value: Swift.Double?, currency: Swift.String?, leadId: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension LPABCSDK.SDEType : Swift.Equatable {}
extension LPABCSDK.SDEType : Swift.Hashable {}
extension LPABCSDK.SDEType : Swift.RawRepresentable {}
extension LPABCSDK.SDEStatusType : Swift.Equatable {}
extension LPABCSDK.SDEStatusType : Swift.Hashable {}
extension LPABCSDK.SDEStatusType : Swift.RawRepresentable {}
extension LPABCSDK.SDEChanelType : Swift.Equatable {}
extension LPABCSDK.SDEChanelType : Swift.Hashable {}
extension LPABCSDK.SDEChanelType : Swift.RawRepresentable {}
extension LPABCSDK.SDEGenderType : Swift.Equatable {}
extension LPABCSDK.SDEGenderType : Swift.Hashable {}
extension LPABCSDK.SDEGenderType : Swift.RawRepresentable {}
extension LPABCSDK.SDEPhoneType : Swift.Equatable {}
extension LPABCSDK.SDEPhoneType : Swift.Hashable {}
extension LPABCSDK.SDEPhoneType : Swift.RawRepresentable {}
@available(iOS 11.3, *)
extension LPABCSDK.LPHostEnvironment : Swift.Equatable {}
@available(iOS 11.3, *)
extension LPABCSDK.LPHostEnvironment : Swift.Hashable {}
@available(iOS 11.3, *)
extension LPABCSDK.LPHostEnvironment : Swift.RawRepresentable {}
@available(iOS 11.3, *)
extension LPABCSDK.LPABCLogLevel : Swift.Equatable {}
@available(iOS 11.3, *)
extension LPABCSDK.LPABCLogLevel : Swift.Hashable {}
@available(iOS 11.3, *)
extension LPABCSDK.LPABCLogLevel : Swift.RawRepresentable {}
@available(iOS 11.3, *)
extension LPABCSDK.SecureFormState : Swift.Equatable {}
@available(iOS 11.3, *)
extension LPABCSDK.SecureFormState : Swift.Hashable {}
